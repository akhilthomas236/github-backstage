name: Backstage Integration Automation

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:
    inputs:
      organization:
        description: 'GitHub Organization Name'
        required: true
      backstage_url:
        description: 'Backstage Instance URL'
        required: true
      github_api_url:
        description: 'GitHub API URL (optional)'
        required: false
      canary_repo:
        description: 'Single repository to test (canary mode)'
        required: false
        type: string

jobs:
  check-canary-status:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    outputs:
      canary_ok: ${{ steps.check_canary.outputs.canary_ok }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check canary status
        id: check_canary
        run: |
          if [ -f ".github/canary-status.json" ]; then
            LAST_SUCCESS=$(jq -r '.last_successful_canary' .github/canary-status.json)
            if [ "$LAST_SUCCESS" != "null" ]; then
              echo "canary_ok=true" >> $GITHUB_OUTPUT
              echo "Last successful canary run: $LAST_SUCCESS"
            else
              echo "canary_ok=false" >> $GITHUB_OUTPUT
              echo "No successful canary run found"
            fi
          else
            echo "canary_ok=false" >> $GITHUB_OUTPUT
            echo "No canary status file found"
          fi

  automate-backstage:
    needs: check-canary-status
    if: github.event_name != 'schedule' || needs.check-canary-status.outputs.canary_ok == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Backstage Automation
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_TOKEN }}
          GITHUB_ORG: ${{ github.event.inputs.organization || secrets.DEFAULT_ORG }}
          BACKSTAGE_URL: ${{ github.event.inputs.backstage_url || secrets.BACKSTAGE_URL }}
          GITHUB_API_URL: ${{ github.event.inputs.github_api_url || secrets.GITHUB_API_URL }}
          CANARY_REPO: ${{ github.event.inputs.canary_repo }}
        run: python backstage_automation.py

      - name: Create Summary
        if: always()
        run: |
          echo "## Backstage Integration Summary" >> $GITHUB_STEP_SUMMARY
          echo "Organization: $GITHUB_ORG" >> $GITHUB_STEP_SUMMARY
          echo "Backstage URL: $BACKSTAGE_URL" >> $GITHUB_STEP_SUMMARY
          if [ -f "automation_summary.txt" ]; then
            cat automation_summary.txt >> $GITHUB_STEP_SUMMARY
          fi

      - name: Update Canary Status
        if: success() && github.event.inputs.canary_repo != ''
        run: |
          # Create the status object
          STATUS_JSON=$(jq -n \
            --arg ts "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --arg repo "${{ github.event.inputs.canary_repo }}" \
            '{last_successful_canary: $ts, canary_repo: $repo}')
          
          # Update the status file
          echo "$STATUS_JSON" > .github/canary-status.json
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Commit and push the updated status
          git add .github/canary-status.json
          git commit -m "Update canary status after successful run [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_TOKEN }}
